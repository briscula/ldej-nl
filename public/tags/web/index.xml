<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on ldej</title>
    <link>/tags/web/</link>
    <description>Recent content in web on ldej</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Apr 2020 17:04:26 +0530</lastBuildDate>
    
	<atom:link href="/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Two ways to group HTTP handlers in Go</title>
      <link>/post/grouping-handlers/</link>
      <pubDate>Fri, 17 Apr 2020 17:04:26 +0530</pubDate>
      
      <guid>/post/grouping-handlers/</guid>
      <description>The Standard Library https://blog.merovius.de/2017/06/18/how-not-to-use-an-http-router.html
type App struct { // We could use http.Handler as a type here; using the specific type has  // the advantage that static analysis tools can link directly from  // h.UserHandler.ServeHTTP to the correct definition. The disadvantage is  // that we have slightly stronger coupling. Do the tradeoff yourself.  UserHandler *UserHandler } func (h *App) ServeHTTP(res http.ResponseWriter, req *http.Request) { var head string head, req.</description>
    </item>
    
    <item>
      <title>http.Handle vs http.HandleFunc</title>
      <link>/post/httphandle_vs_httphandlefunc/</link>
      <pubDate>Fri, 17 Apr 2020 16:49:37 +0530</pubDate>
      
      <guid>/post/httphandle_vs_httphandlefunc/</guid>
      <description>&lt;code&gt;http.HandleFunc&lt;/code&gt; is a helper function to make your function &lt;code&gt;http.Handle&lt;/code&gt; compatible</description>
    </item>
    
  </channel>
</rss>